<%
var log = new Log();
var multitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
var cryptoUtil = Packages.org.wso2.carbon.core.util.CryptoUtil;

var encodedString = decodeURIComponent(request.getParameter("cookie"));
var cookieStr =  new java.lang.String(cryptoUtil.getDefaultCryptoUtil().base64DecodeAndDecrypt(encodedString), "UTF-8");
var cookie = String(cookieStr);
var user = request.getParameter("user");
getUser();
function getUser(){

session.put('auth-cookie', cookie);
session.put('user', user);

    try {

        var client = require('controllers/account_recovery/identityMgtClient.jag');
        var fieldValues = client.getAllRecoveryQuestions();
        var userChallenges = client.getUserChallengeQuestions(multitenantUtils.getTenantAwareUsername(user));
        fieldValues.selectedChalanges = userChallenges.return;

        // Get User Challanges
        var selectedChallanges = {};
        var count = 0;
        if (userChallenges.return != null) {
            if (userChallenges.return.constructor === Array) {
                for (var i in userChallenges.return) {
                    selectedChallanges[userChallenges.return[i].id] = userChallenges.return[i];
                    count++;
                }
            } else if (userChallenges.return.constructor === Object) {
                selectedChallanges[userChallenges.return.id] = userChallenges.return;
                count++;
            }

        }


        var orderedChallanges = {};

        if (fieldValues.return != null) {
            if (fieldValues.return.constructor === Array) {
                for (var i in fieldValues.return) {
                    if (orderedChallanges[fieldValues.return[i].questionSetId] == undefined) {
                        orderedChallanges[fieldValues.return[i].questionSetId] = [];
                    }
                    if (selectedChallanges[fieldValues.return[i].questionSetId] != null) {
                        if (count > 0 && selectedChallanges[fieldValues.return[i].questionSetId].question == fieldValues.return[i].question) {
                            fieldValues.return[i].selected = "true";
                            fieldValues.return[i].answer = selectedChallanges[fieldValues.return[i].questionSetId].answer;
                        }
                        else {
                            fieldValues.return[i].selected = "false";
                            fieldValues.return[i].answer = "";
                        }
                    } else {
                        fieldValues.return[i].selected = "false";
                        fieldValues.return[i].answer = "";
                    }
                    orderedChallanges[fieldValues.return[i].questionSetId].push(fieldValues.return[i]);
                }
            } else if (fieldValues.return.constructor === Object) {

                if (orderedChallanges[fieldValues.return.questionSetId] == undefined) {
                    orderedChallanges[fieldValues.return.questionSetId] = [];
                }
                if (count > 0 && selectedChallanges[fieldValues.return.questionSetId].question == fieldValues.return.question) {
                    fieldValues.return.selected = "true";
                    fieldValues.return.answer = selectedChallanges[fieldValues.return.questionSetId].answer;
                }
                else {
                    fieldValues.return.selected = "false";
                    fieldValues.return.answer = "";
                }
                orderedChallanges[fieldValues.return.questionSetId].push(fieldValues.return);
            }
        }

print( orderedChallanges );
    }catch(e){
print(e);
        log.error(e);
            }

}

%>
